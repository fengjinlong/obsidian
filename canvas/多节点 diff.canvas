{
	"nodes":[
		{"type":"text","text":"## 多节点 diff\n第一轮遍历：处理`更新`的节点。\n\n第二轮遍历：处理剩下的不属于`更新`的节点。","id":"f540de9ff612a10a","x":-631,"y":-160,"width":351,"height":190,"color":"1"},
		{"type":"text","text":"节点更新","id":"13147bd744c0e97f","x":-1160,"y":-215,"width":250,"height":60},
		{"type":"text","text":"节点新增或减少","id":"b38d4fbf3698c044","x":-1160,"y":-90,"width":250,"height":60},
		{"type":"text","text":"变化节位置点","id":"37fb3ee7ba487c46","x":-1160,"y":20,"width":250,"height":60},
		{"type":"text","text":"属性","id":"3f1ea97b1f5e0f43","x":-1580,"y":-260,"width":250,"height":60},
		{"type":"text","text":"类型","id":"bb58a9ec9363b0e3","x":-1580,"y":-170,"width":250,"height":60},
		{"type":"text","text":"## 三个限制\n1. 同级diff\n2. 不同类型产出不同的树\n3. key porp 暗示元素的稳定性","id":"4f2fadbfc8070297","x":-1218,"y":-565,"width":367,"height":205},
		{"type":"text","text":"与 vue 不同，不适用双指针遍历\n[vue3-diff-脑图](vue3-diff-脑图.md)\n\n虽然本次更新的`JSX对象` `newChildren`为数组形式，但是和`newChildren`中每个组件进行比较的是`current fiber`，同级的`Fiber节点`是由`sibling`指针链接形成的单链表，即不支持双指针遍历。\n\n即 `newChildren[0]`与`fiber`比较，`newChildren[1]`与`fiber.sibling`比较。\n\n所以无法使用**双指针**优化。","id":"a6df13209ce6d7c5","x":-1218,"y":341,"width":250,"height":110},
		{"type":"text","text":"2. type 不同\n\t1. 将 oldfiber 标记为 deletion","id":"a636ddb0dad68801","x":770,"y":-443,"width":250,"height":116},
		{"type":"text","text":"1. key不同","id":"ebc7f0553c91ab07","x":770,"y":-285,"width":250,"height":60},
		{"type":"text","text":"继续 newChildren[i]与oldFiber.sibling 遍历","id":"4dbce2f56682526c","x":950,"y":-580,"width":250,"height":60},
		{"type":"text","text":"跳出第一轮遍历","id":"5e1b84e94c0f8380","x":1155,"y":-285,"width":250,"height":60},
		{"type":"text","text":"1. 可以复用，进行下一轮遍历","id":"834495b3b98c9c49","x":375,"y":-595,"width":260,"height":90},
		{"type":"text","text":"3. 二者存在遍历完的情况","id":"73bd287f6e539751","x":375,"y":-160,"width":250,"height":100},
		{"type":"text","text":"2. 不可复用情况","id":"584cdf4d1b013f1c","x":380,"y":-415,"width":255,"height":60},
		{"type":"text","text":" 遍历第一轮, \n 类型为 array 的newChildren 与 oldFiber 及其兄弟的遍历","id":"590a1f57f63211c0","x":-65,"y":-435,"width":250,"height":150},
		{"type":"text","text":" 遍历第二轮","id":"21f705a6ba3a2968","x":-65,"y":246,"width":250,"height":100},
		{"type":"text","text":"1. newChildren 遍历完，给 oldFiber 标记 deletion\n2. oldFiber 遍历完，给 newChildren 生成的 fiber 标记 placement\n3. 都完，diff 结束","id":"94fb43d293dbee05","x":380,"y":86,"width":365,"height":201},
		{"type":"text","text":"都没有遍历完，需要移动，参照 [react  标记节点是否移动](react%20%20标记节点是否移动.md)","id":"5d7766e27d664881","x":385,"y":396,"width":250,"height":124},
		{"id":"a61fa1831ce0ece3","x":-875,"y":728,"width":1375,"height":592,"type":"text","text":"单节点 diff\n\n-   对比type key ，如果有不同就替换\n    \n\n多节点diff，**同级对比**，老的的 tree的结构，新的是 array 的结构\n\n-   构建当前 fiber tree 的 map [ { key1, fiber1 },{ key2, fiber2 },{ key3, fiber3 },{ key4, fiber4 } ]\n    \n-   新 newReactElement 放在在 map 中查找是否存在复用的 fiber ，有就复用并在 map 中删除，没有就创建一个。此时 有一个 newFiber\n    \n-   最终构建一个 tree ，newFiber1 --- newFiber2 ---newFiber3\n    \n-   老的 b1 c2 a3，新的 a3 b1 c2，哪些需要标记移动 flag\n    \n    -   首先定义当前最后不要移动的老节点的索引 lastOldIndexNoMove = 0\n        \n    -   因为我们遍历新 fiber的顺序是 从 0开始的，也就是 a3 b1 c2\n        \n        -   当遍历新节点 a3 时候，对应老节点的 a3 索引是 2，2 > 0 不需要移动，改变 lastOldIndexNoMove = 2\n            \n        -   当遍历新节点 b1 时候，对应老节点的 b1 索引是 0，0 < 2 需要移动，标记 移动flag\n            \n        -   当遍历新节点 c2 时候，对应老节点的 c2 索引是 1，1 < 2 不需要移动，标记 移动flag\n            \n-   此时 map 中 变成 [ { key4, fiber4 } ]，都标记删除"}
	],
	"edges":[
		{"id":"597003056f54b224","fromNode":"a6df13209ce6d7c5","fromSide":"right","toNode":"f540de9ff612a10a","toSide":"bottom"},
		{"id":"40222ce84bde8acf","fromNode":"3f1ea97b1f5e0f43","fromSide":"right","toNode":"13147bd744c0e97f","toSide":"left"},
		{"id":"fc25fb31c22c4ade","fromNode":"bb58a9ec9363b0e3","fromSide":"right","toNode":"13147bd744c0e97f","toSide":"left"},
		{"id":"15e7990cb77e31fc","fromNode":"13147bd744c0e97f","fromSide":"right","toNode":"f540de9ff612a10a","toSide":"left"},
		{"id":"081820f36aa0e05e","fromNode":"b38d4fbf3698c044","fromSide":"right","toNode":"f540de9ff612a10a","toSide":"left"},
		{"id":"faec34190ab3b858","fromNode":"37fb3ee7ba487c46","fromSide":"right","toNode":"f540de9ff612a10a","toSide":"left"},
		{"id":"20ef5e729185c293","fromNode":"f540de9ff612a10a","fromSide":"right","toNode":"590a1f57f63211c0","toSide":"left"},
		{"id":"978764ab93d06a3f","fromNode":"f540de9ff612a10a","fromSide":"right","toNode":"21f705a6ba3a2968","toSide":"left"},
		{"id":"4b34b3c7d6fd8be1","fromNode":"584cdf4d1b013f1c","fromSide":"right","toNode":"ebc7f0553c91ab07","toSide":"left"},
		{"id":"b705dbbd1a3c898c","fromNode":"584cdf4d1b013f1c","fromSide":"right","toNode":"a636ddb0dad68801","toSide":"left"},
		{"id":"598c3164bfebe51c","fromNode":"834495b3b98c9c49","fromSide":"right","toNode":"4dbce2f56682526c","toSide":"left"},
		{"id":"7ea9aa4d5619c3b1","fromNode":"a636ddb0dad68801","fromSide":"right","toNode":"4dbce2f56682526c","toSide":"bottom"},
		{"id":"633bd5f69e5648c0","fromNode":"590a1f57f63211c0","fromSide":"right","toNode":"834495b3b98c9c49","toSide":"left"},
		{"id":"cb3dc4f277ff1b1f","fromNode":"590a1f57f63211c0","fromSide":"right","toNode":"584cdf4d1b013f1c","toSide":"left"},
		{"id":"5a62131b550b4156","fromNode":"590a1f57f63211c0","fromSide":"right","toNode":"73bd287f6e539751","toSide":"left"},
		{"id":"2efb18f769e52d7f","fromNode":"ebc7f0553c91ab07","fromSide":"right","toNode":"5e1b84e94c0f8380","toSide":"left"},
		{"id":"4407bc0512e5d3a3","fromNode":"73bd287f6e539751","fromSide":"right","toNode":"5e1b84e94c0f8380","toSide":"bottom"},
		{"id":"74803ec39c9f43c9","fromNode":"21f705a6ba3a2968","fromSide":"right","toNode":"94fb43d293dbee05","toSide":"left"},
		{"id":"1650adec58eeaf01","fromNode":"21f705a6ba3a2968","fromSide":"right","toNode":"5d7766e27d664881","toSide":"left"},
		{"id":"7ab3ba6be93fd242","fromNode":"4f2fadbfc8070297","fromSide":"right","toNode":"f540de9ff612a10a","toSide":"top"}
	]
}