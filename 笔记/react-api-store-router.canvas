{
	"nodes":[
		{"type":"group","id":"c777bd8923583001","x":-160,"y":-920,"width":569,"height":1140,"label":"hooks"},
		{"type":"group","id":"71402e83d02ebf34","x":-3807,"y":-970,"width":1986,"height":270,"label":"Untitled group"},
		{"type":"text","text":"hooks","id":"7d9e213e88e7fc91","x":-909,"y":-530,"width":250,"height":60,"color":"4"},
		{"type":"text","text":"useRef","id":"e51989916f08a1c6","x":-140,"y":-900,"width":524,"height":60},
		{"type":"file","file":"附件/Pasted image 20230223000129.png","id":"73a7dd995ded9769","x":-3288,"y":-908,"width":399,"height":147},
		{"type":"file","file":"附件/Pasted image 20230223084350.png","id":"3e9e84d01003060d","x":-3787,"y":-929,"width":399,"height":190},
		{"type":"file","file":"附件/Pasted image 20230224194945.png","id":"57a156b831af402c","x":-3740,"y":-640,"width":400,"height":274},
		{"type":"text","text":"### 背景\n1. 15版本 react 做了批处理的优化，但是不能解决长任务情况下会阻塞后续交互，造成卡顿，用户要一直等待的问题\n2. 16版本Fiber 的架构做法\n\t1. 将调度任务放在宏任务中，这样不会阻塞主线程，也就不会让用户失去响应\n\t2. 对更新添加优先级的绑定，多个更新时，可以中断低级，保证高级。添加Scheduler 模块，调度任务的优先级\n\t3. 但是处理不了 高优先级cpu 任务（高级但时间长），低优先级 io 任务（低级但时间短）\n3. 17版本，优化16\n\t1. 从指定一个优先级到指定一个连续的优先级区间","id":"6fb17b3f2c053e18","x":-2111,"y":-950,"width":250,"height":230},
		{"type":"file","file":"附件/Pasted image 20230222231340.png","id":"9085cc59260d2aa0","x":-2626,"y":-903,"width":400,"height":138,"color":"4"},
		{"type":"text","text":"父组件通过 ref 获取子组件的 dom\n```ts\n// 父组件\nfunction Hello() {\n\tconst click = () => {\n\t\tconsole.log(\"ccc\", child.current);\n\t};\n\tconst child = useRef(null);\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={click}>button</button>\n\t\t\t<Child ref={child} />\n\t\t</div>\n\t);\n}\n// 子组件\nconst Child = React.forwardRef((props: any, ref: any) => {\nreturn (\n\t<div>\n\t\t<div ref={ref}>This is the C page</div>\n\t</div>\n\t);\n});\n```\n","id":"474c1cc000388786","x":760,"y":-1184,"width":780,"height":628},
		{"type":"text","text":"ts","id":"9231251460199d72","x":-909,"y":-1133,"width":250,"height":60,"color":"4"},
		{"type":"text","text":"获取路由参数\n1. useParmas\n2. useLocation\n3. useNavigate\n\t1. nav = useNavigate()\n\t2. nav('/') // push\n\t3. nav('/',{replace:true}) // replace\n\t4. ","id":"0b27eeb1766bdcb9","x":-145,"y":583,"width":524,"height":296},
		{"type":"text","text":"createContext\nuseContext\n\nuseReducer","id":"78bbf1c5775a1b49","x":-140,"y":-247,"width":524,"height":127},
		{"type":"text","text":" useImperativeHandle\n 1. 把内部方法通过 ref 暴露出去\n 2. 防止直接使用 ref 暴露而引起的组件暴露权限太大，造成组件不可控，难维护\n 3. 与 React.forwarRef 一起用\n 4. 用法 [useImperativeHandle](react常规%20ts.md#useImperativeHandle)","id":"93255100fae8eefd","x":-140,"y":-66,"width":524,"height":246},
		{"type":"file","file":"笔记/RTK 的使用.md","id":"d16b10ef8b921173","x":-145,"y":324,"width":529,"height":180,"color":"2"},
		{"type":"file","file":"笔记/react常规 ts.md","id":"18e0b7210c997c2b","x":-146,"y":-1460,"width":524,"height":500},
		{"type":"text","text":"useState","id":"809bce75842b61a5","x":-140,"y":-806,"width":529,"height":60},
		{"type":"text","text":"## react.memo() 当 props 不变时候缓存生效\n1. 缓存组件\n2. 只有组件的 props 改变才会触发组件从新渲染\n3. 缓存组件也可以用 useMemo\n```tsx\nconst Com = useMemo(() => {\n\treturn <Some />\n}, []);\n```","id":"97d803bd58d37e36","x":-923,"y":934,"width":529,"height":200,"color":"1"},
		{"type":"text","text":"store","id":"049cc837f39c43cf","x":-909,"y":90,"width":250,"height":60,"color":"4"},
		{"type":"text","text":"router","id":"8a5de2f43da354e8","x":-909,"y":407,"width":250,"height":60,"color":"4"},
		{"type":"file","file":"附件/Pasted image 20230224191507.png","id":"98cbf6762504744f","x":-3740,"y":-296,"width":400,"height":117},
		{"type":"file","file":"附件/Pasted image 20230224154126.png","id":"2ecbb707f3c9df5d","x":-3140,"y":-179,"width":400,"height":299},
		{"type":"file","file":"附件/Pasted image 20230224153658.png","id":"1593b49752a14d97","x":-3740,"y":-100,"width":400,"height":91},
		{"type":"text","text":"原理\n","id":"dd031040176079ce","x":-1720,"y":-260,"width":80,"height":60},
		{"type":"text","text":"useCallback(fn, deps)\n1. 缓存函数，避免由于父函数在 props 的传递而引起的子组件从新渲染\n2. useCallback 也就是父组件传给子组件的一个缓存函数的属性不变，所以必须配合 React.Memo一起使用  [useCallback, React.Memo](useCallback,%20React.Memo.md)\n3. deps 依赖数组\n```js\n  const [count, setCount] = useState(0);\n  const [num, setNum] = useState(1);\n  const click = useCallback(() => {\n    setCount((count) => count + num);\n    setNum((num) => num + 5);\n    // 如果deps不写num，那么 count 永远只是加1\n  }, [num]);\n```","id":"c2d0dc21fe47d68c","x":-140,"y":-534,"width":524,"height":240,"color":"1"},
		{"type":"text","text":"useMemo\n1. 缓存值, 这个值也可以是组件\n```tsx\nconst val = useMemo(()=>{\nreturn fn()\n}, [deps])\n```","id":"9af3509d2abd45ae","x":-140,"y":-712,"width":529,"height":153},
		{"type":"text","text":"基础","id":"87fb941e9e1f1a8f","x":-1333,"y":-260,"width":78,"height":60},
		{"type":"text","text":"# react","id":"48016e45b5265098","x":-1560,"y":-270,"width":200,"height":80,"color":"#da2525"}
	],
	"edges":[
		{"id":"67359676f596aab4","fromNode":"48016e45b5265098","fromSide":"right","toNode":"87fb941e9e1f1a8f","toSide":"left"},
		{"id":"d20938ef0259a2d7","fromNode":"48016e45b5265098","fromSide":"left","toNode":"dd031040176079ce","toSide":"right"},
		{"id":"0de7d5bd7189de39","fromNode":"dd031040176079ce","fromSide":"left","toNode":"6fb17b3f2c053e18","toSide":"right"},
		{"id":"3d1a9a2081341582","fromNode":"9085cc59260d2aa0","fromSide":"left","toNode":"73a7dd995ded9769","toSide":"right","label":"调度流程"},
		{"id":"3a3e9150e151d436","fromNode":"73a7dd995ded9769","fromSide":"left","toNode":"3e9e84d01003060d","toSide":"right"},
		{"id":"849f16d8b91e3a28","fromNode":"6fb17b3f2c053e18","fromSide":"left","toNode":"9085cc59260d2aa0","toSide":"right"},
		{"id":"d94150361b6d9201","fromNode":"87fb941e9e1f1a8f","fromSide":"right","toNode":"7d9e213e88e7fc91","toSide":"left"},
		{"id":"2af7756d3f626579","fromNode":"7d9e213e88e7fc91","fromSide":"right","toNode":"c777bd8923583001","toSide":"left"},
		{"id":"d3ac73861aa543fd","fromNode":"87fb941e9e1f1a8f","fromSide":"right","toNode":"97d803bd58d37e36","toSide":"left"},
		{"id":"ac39cbbc3207869c","fromNode":"8a5de2f43da354e8","fromSide":"right","toNode":"0b27eeb1766bdcb9","toSide":"left"},
		{"id":"a2da39e173b427e5","fromNode":"049cc837f39c43cf","fromSide":"right","toNode":"d16b10ef8b921173","toSide":"left"},
		{"id":"33c8cdc38ca8d358","fromNode":"87fb941e9e1f1a8f","fromSide":"right","toNode":"049cc837f39c43cf","toSide":"left"},
		{"id":"dda58a288b8b62df","fromNode":"87fb941e9e1f1a8f","fromSide":"right","toNode":"8a5de2f43da354e8","toSide":"left"},
		{"id":"760b21b1cff91d54","fromNode":"e51989916f08a1c6","fromSide":"right","toNode":"474c1cc000388786","toSide":"left"},
		{"id":"40c8dfee2da733cf","fromNode":"9231251460199d72","fromSide":"right","toNode":"18e0b7210c997c2b","toSide":"left"},
		{"id":"0c49044f165dcc0b","fromNode":"87fb941e9e1f1a8f","fromSide":"right","toNode":"9231251460199d72","toSide":"left"},
		{"id":"c9a4c6427124abd1","fromNode":"2ecbb707f3c9df5d","fromSide":"left","toNode":"1593b49752a14d97","toSide":"right"}
	]
}