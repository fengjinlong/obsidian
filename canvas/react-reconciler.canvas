{
	"nodes":[
		{"id":"41b90662198d0b79","x":-2000,"y":-1680,"width":7737,"height":3500,"type":"group","label":"未命名组"},
		{"type":"text","text":"ReactDOM.createRoot(document.getElementById('root')).render( App );","id":"682fa7bdfc0bee2d","x":-1980,"y":-507,"width":260,"height":129},
		{"type":"text","text":"1. createContainer(container);\n2. updateContainer(element, root);\n","id":"5fce4f312626cce4","x":-1460,"y":-491,"width":360,"height":97},
		{"type":"text","text":"root : FiberRootNode","id":"c39f81411c585653","x":-740,"y":-747,"width":220,"height":60,"color":"1"},
		{"type":"text","text":"updateContainer(element, root)","id":"3d66f0ad5246b6d4","x":-300,"y":-473,"width":320,"height":60},
		{"type":"text","text":"1. 生成 update，并添加到 hostRootFiber 的  updateQueue","id":"1728dfe7f0097697","x":192,"y":-473,"width":310,"height":98,"color":"4"},
		{"type":"text","text":"renderRoot(root)","id":"40df19e72780bdd9","x":620,"y":-471,"width":250,"height":91},
		{"type":"text","text":"创建workInProgress，并赋值给 全局workInProgress ","id":"81e0a4cf762f18ed","x":980,"y":-486,"width":335,"height":122},
		{"type":"text","text":"  执行  workLoop","id":"f43a543c04acf9b0","x":1460,"y":-471,"width":160,"height":86},
		{"type":"text","text":"commitRoot","id":"afdaaa3a20804bd1","x":2183,"y":780,"width":405,"height":214,"color":"4"},
		{"type":"text","text":"1. 向下递归finishWork 的所有子fiber，到底后在添加 处理 flage 的逻辑\n2. 如果有插入的flags , 将 fiber 插入到 其 对应的 parent","id":"37a8d07ff6e61c72","x":2183,"y":1240,"width":405,"height":180},
		{"type":"text","text":"root.current = finishedWork","id":"3fadbda81281b795","x":2183,"y":1700,"width":405,"height":100},
		{"type":"text","text":"1. 结束 workLoop\n2. 得到 finishedWork ","id":"e9220032e62d6381","x":2240,"y":140,"width":280,"height":120},
		{"type":"text","text":"workInProgress","id":"c4a97cf9be6d799d","x":2260,"y":-473,"width":250,"height":60},
		{"type":"text","text":"workInProgress = sibling","id":"06ea343527cd28b2","x":2967,"y":-1660,"width":280,"height":100},
		{"type":"text","text":"workInProgress = return","id":"6074623fc421d492","x":2967,"y":-1234,"width":280,"height":60},
		{"type":"text","text":"workInProgress = next","id":"96d59b60f0bd3028","x":2967,"y":-740,"width":280,"height":67},
		{"type":"text","text":"next ","id":"824519bd796b16fa","x":3800,"y":-591,"width":250,"height":60},
		{"type":"text","text":"completeUnitOfWork（fiber）","id":"7fbe00b648f36818","x":4400,"y":-591,"width":300,"height":69},
		{"type":"text","text":"1. 第一步执行 completeWork(fiber)\n2. 第二步执行 递归兄弟\n3. 第三步执行 递归 父节点","id":"5ccc0647c4c9f639","x":5060,"y":-1279,"width":320,"height":151},
		{"type":"text","text":"1. 根据 update 计算最新的属性值，并挂载到 wip ( 分情况讨论 )\n\t1.  hostRoot 计算属性，创建子 fiber\n\t2. hostComponent 只 创建子 fiber\n\t3. HostText 返回 null\n2. 生成 子 fiber，并挂载到 wip.child\n3. 返回 子 fiber，也就是 wip.child","id":"158c795abd219c40","x":3700,"y":140,"width":454,"height":280},
		{"type":"text","text":"beginWork(fiber)  返回 子 fiber 递归处理","id":"011a1a2b016186b3","x":3720,"y":780,"width":413,"height":214,"color":"4"},
		{"type":"text","text":"1. 如果是 hostRoot，通过消耗一个更新 获取到memoizedState , 此时的 child 就是 memoizedState，根据 fnxxx(child) 创建子 fiber。需要计算属性也就是这个原因\n2. 如果是 hostComponent,  因为不具备触发更新功能所以不需要计算最新属性。此时的 child 就是 props.children, 根据 fnxxx(child) 创建子 fiber\n3. 如果是 hostText 直接返回 null\n4. mount 阶段需要给 hostRoot 添加一个 插入标记\n5. fnxxx(child) 创建 子fiber，child 可能是 reactElement 也可能是 hostText，或者多节点","id":"77e7ce494ccd3850","x":4500,"y":105,"width":558,"height":350},
		{"type":"text","text":"completeWork(fiber)","id":"2db00234c2647f4e","x":5340,"y":780,"width":377,"height":214,"color":"4"},
		{"type":"text","text":"1. 递归插入子fiber，形成 workInProgress FiberTree\n2. 将子 fiberNode 的 flags 冒泡到父 fiberNode subtreeFlags","id":"0a54bf68151d234a","x":5340,"y":1200,"width":377,"height":160}
	],
	"edges":[
		{"id":"f0f777b52f86d34e","fromNode":"682fa7bdfc0bee2d","fromSide":"right","toNode":"5fce4f312626cce4","toSide":"left","color":"4","label":"createRoot 内部"},
		{"id":"89d0daef6fc96197","fromNode":"5fce4f312626cce4","fromSide":"right","toNode":"c39f81411c585653","toSide":"left","label":"createContainer"},
		{"id":"cb59ea9d572f3ad5","fromNode":"5fce4f312626cce4","fromSide":"right","toNode":"3d66f0ad5246b6d4","toSide":"left"},
		{"id":"2114a13d59e3f0ea","fromNode":"3d66f0ad5246b6d4","fromSide":"right","toNode":"1728dfe7f0097697","toSide":"left"},
		{"id":"464430253884bb8e","fromNode":"1728dfe7f0097697","fromSide":"right","toNode":"40df19e72780bdd9","toSide":"left"},
		{"id":"664d7f77ad6c132f","fromNode":"40df19e72780bdd9","fromSide":"right","toNode":"81e0a4cf762f18ed","toSide":"left"},
		{"id":"74bab6ebe55f273c","fromNode":"81e0a4cf762f18ed","fromSide":"right","toNode":"f43a543c04acf9b0","toSide":"left"},
		{"id":"39ab2ff951145a1c","fromNode":"f43a543c04acf9b0","fromSide":"right","toNode":"c4a97cf9be6d799d","toSide":"left"},
		{"id":"c32d45365c6b03e8","fromNode":"c4a97cf9be6d799d","fromSide":"right","toNode":"011a1a2b016186b3","toSide":"left","label":"workInProgress !== null"},
		{"id":"d9c242c9856745ca","fromNode":"c4a97cf9be6d799d","fromSide":"bottom","toNode":"e9220032e62d6381","toSide":"top","label":"workInProgress === null"},
		{"id":"b10cca59414a493b","fromNode":"158c795abd219c40","fromSide":"top","toNode":"824519bd796b16fa","toSide":"bottom","label":"返回 next , 也就是 wi@p.child"},
		{"id":"a1cebaa2decc9db3","fromNode":"824519bd796b16fa","fromSide":"top","toNode":"96d59b60f0bd3028","toSide":"right","label":"next !== null"},
		{"id":"eee645d9da123052","fromNode":"96d59b60f0bd3028","fromSide":"left","toNode":"c4a97cf9be6d799d","toSide":"top"},
		{"id":"c2872687557a4999","fromNode":"824519bd796b16fa","fromSide":"right","toNode":"7fbe00b648f36818","toSide":"left","label":"next === null"},
		{"id":"ecae10fa39b85107","fromNode":"7fbe00b648f36818","fromSide":"right","toNode":"5ccc0647c4c9f639","toSide":"bottom","label":"fiber!==null"},
		{"id":"a3482b997a1a95ec","fromNode":"5ccc0647c4c9f639","fromSide":"left","toNode":"6074623fc421d492","toSide":"right"},
		{"id":"638ff7c1e491a36b","fromNode":"5ccc0647c4c9f639","fromSide":"top","toNode":"06ea343527cd28b2","toSide":"right"},
		{"id":"0e5a2f9c102dfc4f","fromNode":"6074623fc421d492","fromSide":"left","toNode":"c4a97cf9be6d799d","toSide":"top"},
		{"id":"484e1a62131e13f3","fromNode":"06ea343527cd28b2","fromSide":"left","toNode":"c4a97cf9be6d799d","toSide":"top"},
		{"id":"fd3afe5de91feb5e","fromNode":"c39f81411c585653","fromSide":"right","toNode":"3d66f0ad5246b6d4","toSide":"top"},
		{"id":"770aa4d59172b276","fromNode":"5ccc0647c4c9f639","fromSide":"right","toNode":"2db00234c2647f4e","toSide":"top"},
		{"id":"b90f9626923dadd9","fromNode":"e9220032e62d6381","fromSide":"bottom","toNode":"afdaaa3a20804bd1","toSide":"top","label":"commit 阶段"},
		{"id":"1a1e728b75806eb6","fromNode":"011a1a2b016186b3","fromSide":"top","toNode":"158c795abd219c40","toSide":"bottom"},
		{"id":"6d2ab003cc013c99","fromNode":"158c795abd219c40","fromSide":"right","toNode":"77e7ce494ccd3850","toSide":"left","label":"实现细节"},
		{"id":"f8b59b7c41624e6f","fromNode":"2db00234c2647f4e","fromSide":"bottom","toNode":"0a54bf68151d234a","toSide":"top"},
		{"id":"bc07aec5af299fda","fromNode":"afdaaa3a20804bd1","fromSide":"bottom","toNode":"37a8d07ff6e61c72","toSide":"top","label":"处理 finishWork\n构造离屏 dom tree"},
		{"id":"086d6e291418b74f","fromNode":"37a8d07ff6e61c72","fromSide":"bottom","toNode":"3fadbda81281b795","toSide":"top","label":"挂载"}
	]
}